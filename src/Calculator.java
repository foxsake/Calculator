
import java.awt.Dimension;
import java.awt.event.ItemEvent;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author .foxsake
 */
public class Calculator extends javax.swing.JFrame {
    private boolean operationClicked = true;
    private boolean decimalClicked = false;
    private boolean opEnabledOnConv = false;//la pa
    private int lastTouchTF;
    private long convert;
    private int lastBase;
    private double unitConverterHolder;
    private final String nfeMessage = "Invalid Format";
    /**
     * Creates new form Calculator
     */
    public Calculator() {
        initComponents();
        getContentPane().removeAll();
        setSize(new Dimension(443, 432));
        getContentPane().add(mainPannel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        base = new javax.swing.ButtonGroup();
        control = new javax.swing.ButtonGroup();
        mainPannel = new javax.swing.JPanel();
        display = new javax.swing.JTextField();
        calcControl = new javax.swing.JPanel();
        basicCalc = new javax.swing.JRadioButton();
        notSoBasic = new javax.swing.JRadioButton();
        conv = new javax.swing.JPanel();
        base10 = new javax.swing.JRadioButton("Dec",true);
        base2 = new javax.swing.JRadioButton();
        base8 = new javax.swing.JRadioButton();
        base16 = new javax.swing.JRadioButton();
        funcKeys = new javax.swing.JPanel();
        clear = new javax.swing.JButton();
        backspace = new javax.swing.JButton();
        hexadec = new javax.swing.JPanel();
        hexA = new javax.swing.JButton();
        hexB = new javax.swing.JButton();
        hexC = new javax.swing.JButton();
        hexD = new javax.swing.JButton();
        hexE = new javax.swing.JButton();
        hexF = new javax.swing.JButton();
        pars = new javax.swing.JPanel();
        openPar = new javax.swing.JButton();
        closePar = new javax.swing.JButton();
        basic = new javax.swing.JPanel();
        sevenN = new javax.swing.JButton();
        eightN = new javax.swing.JButton();
        nineN = new javax.swing.JButton();
        fourN = new javax.swing.JButton();
        fiveN = new javax.swing.JButton();
        sixN = new javax.swing.JButton();
        oneN = new javax.swing.JButton();
        twoN = new javax.swing.JButton();
        threeN = new javax.swing.JButton();
        zeroN = new javax.swing.JButton();
        decimal = new javax.swing.JButton();
        operations = new javax.swing.JPanel();
        add = new javax.swing.JButton();
        equals = new javax.swing.JButton();
        subtract = new javax.swing.JButton();
        multiply = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        plusminus = new javax.swing.JButton();
        unitConverter = new javax.swing.JPanel();
        unitList = new javax.swing.JComboBox();
        unit1 = new javax.swing.JTextField();
        unit2 = new javax.swing.JTextField();
        equalLabel = new javax.swing.JLabel();
        unitList1 = new javax.swing.JComboBox();
        unitList2 = new javax.swing.JComboBox();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("noCALCULATOR");
        setResizable(false);

        display.setEditable(false);
        display.setBackground(new java.awt.Color(255, 255, 255));
        display.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        display.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

        calcControl.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        control.add(basicCalc);
        basicCalc.setSelected(true);
        basicCalc.setText("Calculator");
        basicCalc.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                basicCalcItemStateChanged(evt);
            }
        });
        calcControl.add(basicCalc);

        control.add(notSoBasic);
        notSoBasic.setText("Converter");
        notSoBasic.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                notSoBasicItemStateChanged(evt);
            }
        });
        notSoBasic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notSoBasicActionPerformed(evt);
            }
        });
        calcControl.add(notSoBasic);

        conv.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        conv.setEnabled(false);

        base.add(base10);
        base10.setText("Dec");
        base10.setEnabled(false);
        base10.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                base10ItemStateChanged(evt);
            }
        });
        conv.add(base10);

        base.add(base2);
        base2.setText("Bin");
        base2.setEnabled(false);
        base2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                base2ItemStateChanged(evt);
            }
        });
        conv.add(base2);

        base.add(base8);
        base8.setText("Oct");
        base8.setEnabled(false);
        base8.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                base8ItemStateChanged(evt);
            }
        });
        conv.add(base8);

        base.add(base16);
        base16.setText("Hex");
        base16.setEnabled(false);
        base16.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                base16ItemStateChanged(evt);
            }
        });
        conv.add(base16);

        clear.setBackground(new java.awt.Color(204, 0, 51));
        clear.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        clear.setForeground(new java.awt.Color(255, 51, 51));
        clear.setText("C");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });
        funcKeys.add(clear);

        backspace.setBackground(new java.awt.Color(204, 0, 51));
        backspace.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        backspace.setForeground(new java.awt.Color(255, 51, 51));
        backspace.setText("backspace");
        backspace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backspaceActionPerformed(evt);
            }
        });
        funcKeys.add(backspace);

        hexA.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        hexA.setText("A");
        hexA.setEnabled(false);
        hexA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hexAActionPerformed(evt);
            }
        });

        hexB.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        hexB.setText("B");
        hexB.setEnabled(false);
        hexB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hexBActionPerformed(evt);
            }
        });

        hexC.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        hexC.setText("C");
        hexC.setEnabled(false);
        hexC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hexCActionPerformed(evt);
            }
        });

        hexD.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        hexD.setText("D");
        hexD.setEnabled(false);
        hexD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hexDActionPerformed(evt);
            }
        });

        hexE.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        hexE.setText("E");
        hexE.setEnabled(false);
        hexE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hexEActionPerformed(evt);
            }
        });

        hexF.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        hexF.setText("F");
        hexF.setEnabled(false);
        hexF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hexFActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hexadecLayout = new javax.swing.GroupLayout(hexadec);
        hexadec.setLayout(hexadecLayout);
        hexadecLayout.setHorizontalGroup(
            hexadecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hexadecLayout.createSequentialGroup()
                .addGroup(hexadecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hexE, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hexD, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hexF, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hexadecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hexA, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hexB, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hexC, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        hexadecLayout.setVerticalGroup(
            hexadecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hexadecLayout.createSequentialGroup()
                .addGroup(hexadecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hexF, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hexC, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(hexadecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hexE, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hexB, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(hexadecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hexD, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hexA, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(162, 162, 162))
        );

        openPar.setBackground(new java.awt.Color(51, 102, 255));
        openPar.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        openPar.setForeground(new java.awt.Color(102, 153, 255));
        openPar.setText("(");
        openPar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openParActionPerformed(evt);
            }
        });

        closePar.setBackground(new java.awt.Color(51, 102, 255));
        closePar.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        closePar.setForeground(new java.awt.Color(102, 153, 255));
        closePar.setText(")");
        closePar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeParActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout parsLayout = new javax.swing.GroupLayout(pars);
        pars.setLayout(parsLayout);
        parsLayout.setHorizontalGroup(
            parsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parsLayout.createSequentialGroup()
                .addComponent(openPar, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closePar, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        parsLayout.setVerticalGroup(
            parsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(parsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(openPar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(closePar, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        sevenN.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        sevenN.setText("7");
        sevenN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenNActionPerformed(evt);
            }
        });

        eightN.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        eightN.setText("8");
        eightN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightNActionPerformed(evt);
            }
        });

        nineN.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        nineN.setText("9");
        nineN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineNActionPerformed(evt);
            }
        });

        fourN.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        fourN.setText("4");
        fourN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourNActionPerformed(evt);
            }
        });

        fiveN.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        fiveN.setText("5");
        fiveN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveNActionPerformed(evt);
            }
        });

        sixN.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        sixN.setText("6");
        sixN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixNActionPerformed(evt);
            }
        });

        oneN.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        oneN.setText("1");
        oneN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneNActionPerformed(evt);
            }
        });

        twoN.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        twoN.setText("2");
        twoN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoNActionPerformed(evt);
            }
        });

        threeN.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        threeN.setText("3");
        threeN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeNActionPerformed(evt);
            }
        });

        zeroN.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        zeroN.setText("0");
        zeroN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroNActionPerformed(evt);
            }
        });

        decimal.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        decimal.setText(".");
        decimal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decimalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout basicLayout = new javax.swing.GroupLayout(basic);
        basic.setLayout(basicLayout);
        basicLayout.setHorizontalGroup(
            basicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, basicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(basicLayout.createSequentialGroup()
                    .addComponent(oneN, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(twoN, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(threeN, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(basicLayout.createSequentialGroup()
                    .addComponent(zeroN, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(decimal, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, basicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(basicLayout.createSequentialGroup()
                    .addComponent(fourN, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(fiveN, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(sixN, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(basicLayout.createSequentialGroup()
                    .addComponent(sevenN, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(eightN, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(nineN, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        basicLayout.setVerticalGroup(
            basicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(basicLayout.createSequentialGroup()
                .addGroup(basicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sevenN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nineN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(basicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fiveN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fourN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sixN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(basicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oneN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(twoN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(threeN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(basicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zeroN, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(decimal, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        add.setBackground(new java.awt.Color(51, 102, 255));
        add.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        add.setForeground(new java.awt.Color(102, 153, 255));
        add.setText("+");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        equals.setBackground(new java.awt.Color(204, 0, 51));
        equals.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        equals.setForeground(new java.awt.Color(255, 51, 51));
        equals.setText("=");
        equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsActionPerformed(evt);
            }
        });

        subtract.setBackground(new java.awt.Color(51, 102, 255));
        subtract.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        subtract.setForeground(new java.awt.Color(102, 153, 255));
        subtract.setText("-");
        subtract.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtractActionPerformed(evt);
            }
        });

        multiply.setBackground(new java.awt.Color(51, 102, 255));
        multiply.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        multiply.setForeground(new java.awt.Color(102, 153, 255));
        multiply.setText("*");
        multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplyActionPerformed(evt);
            }
        });

        divide.setBackground(new java.awt.Color(51, 102, 255));
        divide.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        divide.setForeground(new java.awt.Color(102, 153, 255));
        divide.setText("/");
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideActionPerformed(evt);
            }
        });

        plusminus.setBackground(new java.awt.Color(51, 102, 255));
        plusminus.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        plusminus.setForeground(new java.awt.Color(102, 153, 255));
        plusminus.setText("+/-");
        plusminus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusminusActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout operationsLayout = new javax.swing.GroupLayout(operations);
        operations.setLayout(operationsLayout);
        operationsLayout.setHorizontalGroup(
            operationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, operationsLayout.createSequentialGroup()
                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(equals, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, operationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(operationsLayout.createSequentialGroup()
                    .addComponent(multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(subtract, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(operationsLayout.createSequentialGroup()
                    .addComponent(divide, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(plusminus, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
        operationsLayout.setVerticalGroup(
            operationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operationsLayout.createSequentialGroup()
                .addGroup(operationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plusminus, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(divide, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(operationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(multiply, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subtract, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(operationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(add, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(equals, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout mainPannelLayout = new javax.swing.GroupLayout(mainPannel);
        mainPannel.setLayout(mainPannelLayout);
        mainPannelLayout.setHorizontalGroup(
            mainPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPannelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPannelLayout.createSequentialGroup()
                        .addComponent(display)
                        .addContainerGap())
                    .addGroup(mainPannelLayout.createSequentialGroup()
                        .addComponent(calcControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPannelLayout.createSequentialGroup()
                        .addGroup(mainPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(mainPannelLayout.createSequentialGroup()
                                .addComponent(conv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(funcKeys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(mainPannelLayout.createSequentialGroup()
                                .addGroup(mainPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(hexadec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(pars, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(basic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(operations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(14, 14, 14))))
        );
        mainPannelLayout.setVerticalGroup(
            mainPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPannelLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(calcControl, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(display, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(conv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(funcKeys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPannelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(basic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(mainPannelLayout.createSequentialGroup()
                            .addComponent(hexadec, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pars, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(operations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        unitConverter.setBorder(javax.swing.BorderFactory.createTitledBorder("Unit Converter"));

        unitList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Angle", "Temperature" }));
        unitList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitListActionPerformed(evt);
            }
        });

        unit1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        unit1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                unit1KeyReleased(evt);
            }
        });

        unit2.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        unit2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                unit2KeyReleased(evt);
            }
        });

        equalLabel.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        equalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        equalLabel.setText("=");

        unitList1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Degree", "Gradian", "Radian" }));
        unitList1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitList1ActionPerformed(evt);
            }
        });

        unitList2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Degree", "Gradian", "Radian" }));
        unitList2.setSelectedIndex(1);
        unitList2.setToolTipText("");
        unitList2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unitList2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout unitConverterLayout = new javax.swing.GroupLayout(unitConverter);
        unitConverter.setLayout(unitConverterLayout);
        unitConverterLayout.setHorizontalGroup(
            unitConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unitConverterLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(unitConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(unitList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(unitConverterLayout.createSequentialGroup()
                        .addGroup(unitConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(unit1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unitList1, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(equalLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(unitConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(unit2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unitList2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        unitConverterLayout.setVerticalGroup(
            unitConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(unitConverterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(unitList, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(unitConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(unitConverterLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(unitConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(unit1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unit2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(unitConverterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(unitList1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unitList2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(unitConverterLayout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(equalLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("Settings");

        jCheckBoxMenuItem2.setText("Unit Conversion");
        jCheckBoxMenuItem2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxMenuItem2ItemStateChanged(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItem2);
        jMenu1.add(jSeparator1);

        jCheckBoxMenuItem1.setText("Enable Operations on Converter mode(unfinished)");
        jCheckBoxMenuItem1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxMenuItem1ItemStateChanged(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPannel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(unitConverter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainPannel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(unitConverter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        unitConverter.getAccessibleContext().setAccessibleName("");
        unitConverter.getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        display.setText(null);
        decimalClicked =false;
    }//GEN-LAST:event_clearActionPerformed

    private void backspaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backspaceActionPerformed
        if(!display.getText().equals("")){
        StringBuilder sb = new StringBuilder(display.getText());
        sb.deleteCharAt(display.getText().length()-1);
        display.setText(sb.toString());
        }
    }//GEN-LAST:event_backspaceActionPerformed

    private void hexAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hexAActionPerformed
        display.setText(display.getText()+hexA.getText());
    }//GEN-LAST:event_hexAActionPerformed

    private void hexBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hexBActionPerformed
        display.setText(display.getText()+hexB.getText());
    }//GEN-LAST:event_hexBActionPerformed

    private void hexCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hexCActionPerformed
        display.setText(display.getText()+hexC.getText());
    }//GEN-LAST:event_hexCActionPerformed

    private void hexDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hexDActionPerformed
        display.setText(display.getText()+hexD.getText());
    }//GEN-LAST:event_hexDActionPerformed

    private void hexEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hexEActionPerformed
        display.setText(display.getText()+hexE.getText());
    }//GEN-LAST:event_hexEActionPerformed

    private void hexFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hexFActionPerformed
        display.setText(display.getText()+hexF.getText());
    }//GEN-LAST:event_hexFActionPerformed

    private void base10ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_base10ItemStateChanged
        decimal.setEnabled(true);
        hexA.setEnabled(false);
        hexB.setEnabled(false);
        hexC.setEnabled(false);
        hexD.setEnabled(false);
        hexE.setEnabled(false);
        hexF.setEnabled(false);
        zeroN.setEnabled(true);
        oneN.setEnabled(true);
        twoN.setEnabled(true);
        threeN.setEnabled(true);
        fourN.setEnabled(true);
        fiveN.setEnabled(true);
        sixN.setEnabled(true);
        sevenN.setEnabled(true);
        eightN.setEnabled(true);
        nineN.setEnabled(true);
        if(evt.getStateChange() == ItemEvent.SELECTED){
        if(!display.getText().equals("")){
            try{
            switch(lastBase){
                case 2:
                    convert = Long.parseLong(display.getText().trim(),2);
                    display.setText(String.valueOf(convert));
                    break;
                case 8:
                    convert = Long.parseLong(display.getText().trim(),8);
                    display.setText(String.valueOf(convert));
                    break;
                case 16:
                    convert = Long.parseLong(display.getText().trim(),16);
                    display.setText(String.valueOf(convert));
                    break;
            }
            }catch(NumberFormatException e){
                display.setText(nfeMessage);
            }
        }
        }else {
            lastBase = 10;
        }
    }//GEN-LAST:event_base10ItemStateChanged

    private void base2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_base2ItemStateChanged
        decimal.setEnabled(false);
        hexA.setEnabled(false);
        hexB.setEnabled(false);
        hexC.setEnabled(false);
        hexD.setEnabled(false);
        hexE.setEnabled(false);
        hexF.setEnabled(false);
        twoN.setEnabled(false);
        threeN.setEnabled(false);
        fourN.setEnabled(false);
        fiveN.setEnabled(false);
        sixN.setEnabled(false);
        sevenN.setEnabled(false);
        eightN.setEnabled(false);
        nineN.setEnabled(false);
        if(evt.getStateChange() == ItemEvent.SELECTED){
        if(!display.getText().equals("")){
            try{
            switch(lastBase){
                case 10:
                    convert = Long.parseLong(display.getText().trim());
                    display.setText(Long.toString(convert,2));
                    break;
                case 8:
                    convert = Long.parseLong(display.getText().trim(),8);
                    display.setText(Long.toString(convert,2));
                    break;
                case 16:
                    convert = Long.parseLong(display.getText().trim(),16);
                    display.setText(Long.toString(convert,2));
                    break;
            }
            }catch(NumberFormatException e){
                display.setText(nfeMessage);
            }
        }
        }else{
            lastBase = 2;
        }
    }//GEN-LAST:event_base2ItemStateChanged

    private void decimalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decimalActionPerformed
        if(!display.getText().equals("")){
            if(decimalClicked == false)
            display.setText(display.getText()+decimal.getText());
            decimalClicked = true;
        }
    }//GEN-LAST:event_decimalActionPerformed

    private void zeroNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroNActionPerformed
        if(operationClicked == false){
            display.setText(zeroN.getText());
            operationClicked = true;
        }
        else
        display.setText(display.getText()+zeroN.getText());
    }//GEN-LAST:event_zeroNActionPerformed

    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsActionPerformed
        if(!display.getText().equals("")){
            ScriptEngineManager sem = new ScriptEngineManager();
            ScriptEngine se = sem.getEngineByName("JavaScript");
            try{
                display.setText(String.valueOf(se.eval(display.getText())));
            }catch(ScriptException e){
                display.setText("Syntax Error");
                System.out.println("Error");
            }
            operationClicked = false;
        }
    }//GEN-LAST:event_equalsActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        if(!display.getText().equals("")&&display.getText().charAt(display.getText().length()-1)!=add.getText().charAt(add.getText().length()-1)){
            display.setText(display.getText()+add.getText());
            operationClicked = true;
        }
    }//GEN-LAST:event_addActionPerformed

    private void threeNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeNActionPerformed
        if(operationClicked == false){
            display.setText(threeN.getText());
            operationClicked = true;
        }
        else
            display.setText(display.getText()+threeN.getText());
    }//GEN-LAST:event_threeNActionPerformed

    private void twoNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoNActionPerformed
        if(operationClicked == false){
            display.setText(twoN.getText());
            operationClicked = true;
        }
        else
        display.setText(display.getText()+twoN.getText());
    }//GEN-LAST:event_twoNActionPerformed

    private void oneNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneNActionPerformed
        if(operationClicked == false){
            display.setText(oneN.getText());
            operationClicked = true;
        }
        else
        display.setText(display.getText()+oneN.getText());
    }//GEN-LAST:event_oneNActionPerformed

    private void subtractActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtractActionPerformed
        if(display.getText().equals("")||display.getText().charAt(display.getText().length()-1)!=subtract.getText().charAt(subtract.getText().length()-1)){
            display.setText(display.getText()+subtract.getText());
            operationClicked = true;
        }
    }//GEN-LAST:event_subtractActionPerformed

    private void multiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplyActionPerformed
        if(!display.getText().equals("")&&display.getText().charAt(display.getText().length()-1)!=multiply.getText().charAt(multiply.getText().length()-1)){
            display.setText(display.getText()+multiply.getText());
            operationClicked = true;
        }
    }//GEN-LAST:event_multiplyActionPerformed

    private void sixNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixNActionPerformed
        if(operationClicked == false){
            display.setText(sixN.getText());
            operationClicked = true;
        }
        else
        display.setText(display.getText()+sixN.getText());
    }//GEN-LAST:event_sixNActionPerformed

    private void fiveNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveNActionPerformed
        if(operationClicked == false){
            display.setText(fiveN.getText());
            operationClicked = true;
        }
        else
        display.setText(display.getText()+fiveN.getText());
    }//GEN-LAST:event_fiveNActionPerformed

    private void fourNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourNActionPerformed
        if(operationClicked == false){
            display.setText(fourN.getText());
            operationClicked = true;
        }
        else
        display.setText(display.getText()+fourN.getText());
    }//GEN-LAST:event_fourNActionPerformed

    private void plusminusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusminusActionPerformed
        if(!display.getText().equals("")){
            ScriptEngineManager sem = new ScriptEngineManager();
            ScriptEngine se = sem.getEngineByName("JavaScript");
            try{
                display.setText(String.valueOf(se.eval(display.getText()+"*(-1)")));
            }catch(ScriptException e){
                display.setText("Syntax Error");
                System.out.println("Error");
            }
            operationClicked = true;
        }
    }//GEN-LAST:event_plusminusActionPerformed

    private void divideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideActionPerformed
        if(!display.getText().equals("")&&display.getText().charAt(display.getText().length()-1)!=divide.getText().charAt(divide.getText().length()-1)){
            display.setText(display.getText()+divide.getText());
            operationClicked = true;
        }
    }//GEN-LAST:event_divideActionPerformed

    private void nineNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineNActionPerformed
        if(operationClicked == false){
            display.setText(nineN.getText());
            operationClicked = true;
        }
        else
        display.setText(display.getText()+nineN.getText());
    }//GEN-LAST:event_nineNActionPerformed

    private void eightNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightNActionPerformed
        if(operationClicked == false){
            display.setText(eightN.getText());
            operationClicked = true;
        }
        else
        display.setText(display.getText()+eightN.getText());
    }//GEN-LAST:event_eightNActionPerformed

    private void sevenNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenNActionPerformed
        if(operationClicked == false){
            display.setText(sevenN.getText());
            operationClicked = true;
        }
        else
        display.setText(display.getText()+sevenN.getText());
    }//GEN-LAST:event_sevenNActionPerformed

    private void base8ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_base8ItemStateChanged
        decimal.setEnabled(false);
        hexA.setEnabled(false);
        hexB.setEnabled(false);
        hexC.setEnabled(false);
        hexD.setEnabled(false);
        hexE.setEnabled(false);
        hexF.setEnabled(false);
        twoN.setEnabled(true);
        threeN.setEnabled(true);
        fourN.setEnabled(true);
        fiveN.setEnabled(true);
        sixN.setEnabled(true);
        sevenN.setEnabled(true);
        eightN.setEnabled(false);
        nineN.setEnabled(false);
        if(evt.getStateChange() == ItemEvent.SELECTED){
        if(!display.getText().equals("")){
            try{
            switch(lastBase){
                case 10:
                    convert = Long.parseLong(display.getText().trim());
                    display.setText(Long.toString(convert,8));
                    break;
                case 2:
                    convert = Long.parseLong(display.getText().trim(),2);
                    display.setText(Long.toString(convert,8));
                    break;
                case 16:
                    convert = Long.parseLong(display.getText().trim(),16);
                    display.setText(Long.toString(convert,8));
                    break;
            }    
        }catch(NumberFormatException e){
                display.setText(nfeMessage);
        }
        }
        }else{
            lastBase = 8;
        }
    }//GEN-LAST:event_base8ItemStateChanged

    private void base16ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_base16ItemStateChanged
        decimal.setEnabled(false);
        hexA.setEnabled(true);
        hexB.setEnabled(true);
        hexC.setEnabled(true);
        hexD.setEnabled(true);
        hexE.setEnabled(true);
        hexF.setEnabled(true);
        twoN.setEnabled(true);
        threeN.setEnabled(true);
        fourN.setEnabled(true);
        fiveN.setEnabled(true);
        sixN.setEnabled(true);
        sevenN.setEnabled(true);
        eightN.setEnabled(true);
        nineN.setEnabled(true);
        if(evt.getStateChange() == ItemEvent.SELECTED){
        if(!display.getText().equals("")){
            try{
            switch(lastBase){
                case 10:
                    convert = Long.parseLong(display.getText().trim());
                    display.setText(Long.toString(convert,16).toUpperCase());
                    break;
                case 2:
                    convert = Long.parseLong(display.getText().trim(),2);
                    display.setText(Long.toString(convert,16).toUpperCase());
                    break;
                case 8:
                    convert = Long.parseLong(display.getText().trim(),8);
                    display.setText(Long.toString(convert,16).toUpperCase());
                    break;
            }
            }catch(NumberFormatException e){
                display.setText(nfeMessage);
            }
        }
        }else{
            lastBase = 16;
        }
    }//GEN-LAST:event_base16ItemStateChanged

    private void notSoBasicItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_notSoBasicItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            decimal.setEnabled(false);
            plusminus.setEnabled(false);
            display.setText("");
            for(int i=0;i<conv.getComponentCount();i++){
                conv.getComponent(i).setEnabled(true);
            }
            for(int i=0;i<pars.getComponentCount();i++){
                pars.getComponent(i).setEnabled(false);
            }
            if(opEnabledOnConv==false)
            for(int i=0;i<operations.getComponentCount();i++){//temp
                operations.getComponent(i).setEnabled(false);
            }
        }
    }//GEN-LAST:event_notSoBasicItemStateChanged

    private void basicCalcItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_basicCalcItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED){
            decimal.setEnabled(true);
            plusminus.setEnabled(true);
            base10.setSelected(true);
            display.setText("");
            for(int i=0;i<conv.getComponentCount();i++){
                conv.getComponent(i).setEnabled(false);
            }
            for(int i=0;i<pars.getComponentCount();i++){
                pars.getComponent(i).setEnabled(true);
            }
            for(int i=0;i<operations.getComponentCount();i++){//temp
                operations.getComponent(i).setEnabled(true);
            }
        }
    }//GEN-LAST:event_basicCalcItemStateChanged

    private void openParActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openParActionPerformed
        display.setText(display.getText()+openPar.getText());
    }//GEN-LAST:event_openParActionPerformed

    private void closeParActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeParActionPerformed
        display.setText(display.getText()+closePar.getText());
    }//GEN-LAST:event_closeParActionPerformed

    private void jCheckBoxMenuItem1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem1ItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED)
            opEnabledOnConv = true;
        else
            opEnabledOnConv = false;
    }//GEN-LAST:event_jCheckBoxMenuItem1ItemStateChanged

    private void jCheckBoxMenuItem2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItem2ItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED){
        getContentPane().removeAll();
        setSize(new Dimension(443, 627));
        getContentPane().add(mainPannel);
        getContentPane().add(unitConverter);
        revalidate();
        }else{
            getContentPane().removeAll();
            setSize(new Dimension(443, 432));
            getContentPane().add(mainPannel);
        }
    }//GEN-LAST:event_jCheckBoxMenuItem2ItemStateChanged

    private void unitList1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitList1ActionPerformed
        javax.swing.JTextField tf;
        if(lastTouchTF==1)
            tf = unit1;
        else
            tf = unit2;
        
        switch(unitList.getSelectedIndex()){
            case 0: angleConverter(tf); break;
            case 1: temperatureConverter(tf); break;
        }
    }//GEN-LAST:event_unitList1ActionPerformed

    private void unit1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unit1KeyReleased
        switch(unitList.getSelectedIndex()){
            case 0: angleConverter(unit1); break;
            case 1: temperatureConverter(unit1); break;
        }
        lastTouchTF = 1;
    }//GEN-LAST:event_unit1KeyReleased

    private void unit2KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_unit2KeyReleased
        switch(unitList.getSelectedIndex()){
            case 0: angleConverter(unit2); break;
            case 1: temperatureConverter(unit2); break;
        }
        lastTouchTF = 2;
    }//GEN-LAST:event_unit2KeyReleased

    private void unitList2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitList2ActionPerformed
        javax.swing.JTextField tf;
        if(lastTouchTF==1)
            tf = unit1;
        else
            tf = unit2;
        
        switch(unitList.getSelectedIndex()){
            case 0: angleConverter(tf); break;
            case 1: temperatureConverter(tf); break;
        }
    }//GEN-LAST:event_unitList2ActionPerformed

    private void unitListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unitListActionPerformed
        //javax.swing.JComboBox temp=new javax.swing.JComboBox();
        String temp[] = new String[] {""};
        switch(unitList.getSelectedIndex()){
            case 0: 
                //temp.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Degree", "Gradian", "Radian" }));
                temp = new String[]  { "Degree", "Gradian", "Radian" };
                break;
            case 1:
                temp=new String[] { "Celcius", "Farenhight","Kelvin" };
                break;
        }
        unitList1.setModel(new javax.swing.DefaultComboBoxModel(temp));
        unitList2.setModel(new javax.swing.DefaultComboBoxModel(temp));
        unitList2.setSelectedIndex(1);
    }//GEN-LAST:event_unitListActionPerformed

    private void notSoBasicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notSoBasicActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_notSoBasicActionPerformed

    private void temperatureConverter(javax.swing.JTextField tf){
        javax.swing.JTextField to;
        javax.swing.JComboBox cb1;
        javax.swing.JComboBox cb2;
        if(tf==unit1){
            to = unit2;
            cb1 = unitList1;
            cb2 = unitList2;
        }else{
            to = unit1;
            cb1 = unitList2;
            cb2 = unitList1;
        }
        try{
            unitConverterHolder = Double.parseDouble(tf.getText());
        if(!tf.getText().equals("")){
            
        if(cb1.getSelectedIndex()==0&&cb2.getSelectedIndex()==1){
            to.setText(String.valueOf(((9*unitConverterHolder)/5)+32));//c to f
        }else if(cb1.getSelectedIndex()==0&&cb2.getSelectedIndex()==2){
            to.setText(String.valueOf(unitConverterHolder+273.15));//c to k
        }else if(cb1.getSelectedIndex()==1 && cb2.getSelectedIndex()==0){
            to.setText(String.valueOf(((unitConverterHolder-32)*5)/9));// f to c
        }else if(cb1.getSelectedIndex()==1&&cb2.getSelectedIndex()==2){
            to.setText(String.valueOf((unitConverterHolder-32)/1.8000 + 273.15));//f to k
        }else if(cb1.getSelectedIndex()==2&&cb2.getSelectedIndex()==0){
            to.setText(String.valueOf(unitConverterHolder-273.15));//k to c
        }else if(cb1.getSelectedIndex()==2&&cb2.getSelectedIndex()==1){
            to.setText(String.valueOf((unitConverterHolder-273.15)*1.8000 + 32.00));//k to f
        }else{
            to.setText(tf.getText());
        }
        }
        }catch(NumberFormatException e){
            to.setText("");
        }
    }
    
    private void angleConverter(javax.swing.JTextField tf){
        javax.swing.JTextField to;
        javax.swing.JComboBox cb1;
        javax.swing.JComboBox cb2;
        if(tf==unit1){
            to = unit2;
            cb1 = unitList1;
            cb2 = unitList2;
        }else{
            to = unit1;
            cb1 = unitList2;
            cb2 = unitList1;
        }
        try{
            unitConverterHolder = Double.parseDouble(tf.getText());
        if(!tf.getText().equals("")){
        if(cb1.getSelectedIndex()==0&&cb2.getSelectedIndex()==1){
            to.setText(String.valueOf(((Math.PI/180) / (Math.PI/200))*unitConverterHolder));
        }else if(cb1.getSelectedIndex()==0&&cb2.getSelectedIndex()==2){
            to.setText(String.valueOf((Math.PI/180)*unitConverterHolder));
        }else if(cb1.getSelectedIndex()==1 && cb2.getSelectedIndex()==0){
            to.setText(String.valueOf(((Math.PI/200) / (Math.PI/180))*unitConverterHolder));
        }else if(cb1.getSelectedIndex()==1&&cb2.getSelectedIndex()==2){
            to.setText(String.valueOf((Math.PI/200)*unitConverterHolder));
        }else if(cb1.getSelectedIndex()==2&&cb2.getSelectedIndex()==0){
            to.setText(String.valueOf((1 / (Math.PI/180))*unitConverterHolder));
        }else if(cb1.getSelectedIndex()==2&&cb2.getSelectedIndex()==1){
            to.setText(String.valueOf((1 / (Math.PI/200))*unitConverterHolder));
        }else{
            to.setText(tf.getText());
        }
        }
        }catch(NumberFormatException e){
            to.setText("");
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Calculator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton backspace;
    private javax.swing.ButtonGroup base;
    private javax.swing.JRadioButton base10;
    private javax.swing.JRadioButton base16;
    private javax.swing.JRadioButton base2;
    private javax.swing.JRadioButton base8;
    private javax.swing.JPanel basic;
    private javax.swing.JRadioButton basicCalc;
    private javax.swing.JPanel calcControl;
    private javax.swing.JButton clear;
    private javax.swing.JButton closePar;
    private javax.swing.ButtonGroup control;
    private javax.swing.JPanel conv;
    private javax.swing.JButton decimal;
    private javax.swing.JTextField display;
    private javax.swing.JButton divide;
    private javax.swing.JButton eightN;
    private javax.swing.JLabel equalLabel;
    private javax.swing.JButton equals;
    private javax.swing.JButton fiveN;
    private javax.swing.JButton fourN;
    private javax.swing.JPanel funcKeys;
    private javax.swing.JButton hexA;
    private javax.swing.JButton hexB;
    private javax.swing.JButton hexC;
    private javax.swing.JButton hexD;
    private javax.swing.JButton hexE;
    private javax.swing.JButton hexF;
    private javax.swing.JPanel hexadec;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPanel mainPannel;
    private javax.swing.JButton multiply;
    private javax.swing.JButton nineN;
    private javax.swing.JRadioButton notSoBasic;
    private javax.swing.JButton oneN;
    private javax.swing.JButton openPar;
    private javax.swing.JPanel operations;
    private javax.swing.JPanel pars;
    private javax.swing.JButton plusminus;
    private javax.swing.JButton sevenN;
    private javax.swing.JButton sixN;
    private javax.swing.JButton subtract;
    private javax.swing.JButton threeN;
    private javax.swing.JButton twoN;
    private javax.swing.JTextField unit1;
    private javax.swing.JTextField unit2;
    private javax.swing.JPanel unitConverter;
    private javax.swing.JComboBox unitList;
    private javax.swing.JComboBox unitList1;
    private javax.swing.JComboBox unitList2;
    private javax.swing.JButton zeroN;
    // End of variables declaration//GEN-END:variables
}
